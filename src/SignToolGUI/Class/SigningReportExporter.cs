using System;
using System.Collections.Generic;
using System.IO;

namespace SignToolGUI.Class
{
    public static class SigningReportExporter
    {
        public static void ExportToHtml(
            IList<Forms.MainForm.SigningReportEntry> entries,
            string certType,
            string certDetails,
            string appVersion,
            string outputPath)
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine("<!DOCTYPE html>");
            sb.AppendLine("<html><head><meta charset='utf-8'><title>Signing Report</title>");
            sb.AppendLine(@"<style>
        body { font-family: Segoe UI, Arial, sans-serif; background: #f8f8f8; }
        h1 { color: #2d5c8a; }
        h2 { color: #444; font-size: 1.1em; margin-bottom: 0.5em; }
        ul.job-summary { list-style: none; padding: 0; margin: 0 0 1em 0; }
        ul.job-summary li { margin-bottom: 4px; }
        .cert-details {
            background: #f4f8fc;
            border: 1px solid #cce;
            padding: 16px 18px;
            margin-left: 0;
            margin-bottom: 1.5em;
            max-width: 480px;
            box-shadow: 0 2px 8px rgba(44, 76, 120, 0.08);
            border-radius: 10px;
        }
        .cert-details strong { font-size: 1.08em; color: #2d5c8a; }
        table { border-collapse: collapse; width: 100%; background: #fff; }
        th, td { border: 1px solid #ccc; padding: 8px; }
        th { background: #e3eaf2; }
        tr.success { background: #eafbe7; }
        tr.error { background: #ffeaea; }
        tr.pending { background: #fffbe7; }
        pre { font-family: Consolas, monospace; font-size: 12px; white-space: pre-wrap; margin: 0; }
    </style></head><body>");
            sb.AppendLine("<h1>Signing Report</h1>");
            sb.AppendLine("<h2>Job Summary</h2>");
            sb.AppendLine("<ul class='job-summary'>");
            sb.AppendLine($"<li><strong>Date:</strong> {DateTime.Now:yyyy-MM-dd HH:mm:ss}</li>");
            sb.AppendLine($"<li><strong>Certificate Type:</strong> {System.Net.WebUtility.HtmlEncode(certType)}</li>");
            sb.AppendLine($"<li><strong>Files Signed:</strong> {entries.Count}</li>");
            sb.AppendLine($"<li><strong>Generated by:</strong> {Environment.UserName} on {Environment.MachineName}</li>");
            sb.AppendLine($"<li><strong>Application Version:</strong> {appVersion}</li>");
            //sb.AppendLine($"<li><strong>OS Version:</strong> {Environment.OSVersion.VersionString}</li>");
            //sb.AppendLine($"<li><strong>.NET Version:</strong> {Environment.Version}</li>");
            sb.AppendLine("</ul>");

            sb.AppendLine("<div class='cert-details'><strong>Certificate Details</strong><br><pre>" +
                System.Net.WebUtility.HtmlEncode(certDetails) + "</pre></div>");

            sb.AppendLine("<table>");
            sb.AppendLine("<tr><th>File Name</th><th>Status</th><th>Error</th><th>Timestamp</th></tr>");
            foreach (var entry in entries)
            {
                var rowClass = entry.Status == "Success" ? "success" : entry.Status == "Error" ? "error" : "pending";
                sb.AppendLine($"<tr class='{rowClass}'>");
                sb.AppendLine($"<td>{System.Net.WebUtility.HtmlEncode(entry.FileName)}</td>");
                sb.AppendLine($"<td>{System.Net.WebUtility.HtmlEncode(entry.Status)}</td>");
                sb.AppendLine($"<td>{System.Net.WebUtility.HtmlEncode(entry.Error)}</td>");
                sb.AppendLine($"<td>{System.Net.WebUtility.HtmlEncode(entry.Timestamp)}</td>");
                sb.AppendLine("</tr>");
            }
            sb.AppendLine("</table>");
            sb.AppendLine("</body></html>");
            File.WriteAllText(outputPath, sb.ToString());
        }

        public static void ExportToCsv(
            IList<Forms.MainForm.SigningReportEntry> entries,
            string certType,
            string certDetails,
            string appVersion,
            string outputPath)
        {
            var lines = new List<string>
            {
                $"# Signing Report",
                $"# Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
                $"# Certificate Type: {certType}",
                $"# Files Signed: {entries.Count}",
                $"# Generated by: {Environment.UserName} on {Environment.MachineName}",
                $"# Application Version: {appVersion}",
                $"# OS Version: {Environment.OSVersion.VersionString}",
                $"# .NET Version: {Environment.Version}",
                $"# Certificate Details: {certDetails.Replace(Environment.NewLine, " | ")}",
                "",
                "File Name,Status,Error,Timestamp"
            };

            foreach (var entry in entries)
            {
                lines.Add($"\"{entry.FileName}\",\"{entry.Status}\",\"{entry.Error}\",\"{entry.Timestamp}\"");
            }

            File.WriteAllLines(outputPath, lines);
        }

        public static void ExportToTxt(
            IList<Forms.MainForm.SigningReportEntry> entries,
            string certType,
            string certDetails,
            string appVersion,
            string outputPath)
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine("=== Signing Report ===");
            sb.AppendLine($"Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"Certificate Type: {certType}");
            sb.AppendLine($"Files Signed: {entries.Count}");
            sb.AppendLine($"Generated by: {Environment.UserName} on {Environment.MachineName}");
            sb.AppendLine($"Application Version: {appVersion}");
            sb.AppendLine($"OS Version: {Environment.OSVersion.VersionString}");
            sb.AppendLine($".NET Version: {Environment.Version}");
            sb.AppendLine("Certificate Details:");
            sb.AppendLine(certDetails);
            sb.AppendLine(new string('=', 60));

            foreach (var entry in entries)
            {
                sb.AppendLine($"File: {entry.FileName}");
                sb.AppendLine($"Status: {entry.Status}");
                if (!string.IsNullOrEmpty(entry.Error))
                    sb.AppendLine($"Error: {entry.Error}");
                sb.AppendLine($"Timestamp: {entry.Timestamp}");
                sb.AppendLine(new string('-', 60));
            }

            File.WriteAllText(outputPath, sb.ToString());
        }
    }
}